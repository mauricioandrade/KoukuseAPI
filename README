[EN]
# Kokusen-API ‚ö°

An immersive, gamified REST API based on the Jujutsu Kaisen universe.

[![Java](https://img.shields.io/badge/Java-17-blue.svg)](https://www.java.com)
[![Spring Boot](https://img.shields.io/badge/Spring_Boot-3.3-green.svg)](https://spring.io/projects/spring-boot)
[![PostgreSQL](https://img.shields.io/badge/PostgreSQL-16-blue.svg)](https://www.postgresql.org/)
[![Docker](https://img.shields.io/badge/Docker-ready-blue.svg)](https://www.docker.com/)
[![Swagger](https://img.shields.io/badge/Swagger-documented-green.svg)](https://swagger.io/)

---

## üìñ About The Project

**Kokusen-API** is the backend for a complete ecosystem for Jujutsu Kaisen fans. The API allows managing universe entities such as Sorcerers, Clans, and Cursed Techniques. Furthermore, it introduces gamification elements, like a quiz system to increase users' "Cursed Energy" levels and the ability to build strategic sorcerer teams.

This project is built following software development best practices, featuring a well-defined MVC (Model-View-Controller) architecture, data validation, and endpoint security.

### ‚ú® Planned Features
- [ ] Full CRUD for Sorcerers and Clans.
- [ ] User authentication and authorization system with Spring Security.
- [ ] Quiz endpoint to test knowledge and increase energy levels.
- [ ] Logic to assemble and manage sorcerer teams.
- [ ] Interactive and comprehensive documentation with Swagger (OpenAPI).
- [ ] Fully containerized application with Docker.

---

## üõ†Ô∏è Built With

This project was built with a set of modern and robust technologies:

* **Language:** Java 17+
* **Framework:** Spring Boot 3.3+
* **Data Access:** Spring Data JPA
* **Security:** Spring Security
* **Database:** PostgreSQL
* **Validation:** Bean Validation
* **Code Optimization:** Lombok
* **Database Migrations:** Flyway
* **Documentation:** SpringDoc (Swagger/OpenAPI)
* **Containerization:** Docker

---

## üöÄ Getting Started

To run this project locally, follow the steps below.

### Prerequisites
* JDK 17 or higher
* Maven 3.8+ or Gradle 8+
* Docker and Docker Compose (recommended for the database)

### Installation

1.  **Clone the repository:**
    ```bash
    git clone [https://github.com/your-username/kokusen-api.git](https://github.com/your-username/kokusen-api.git)
    cd kokusen-api
    ```

2.  **Set up the Database (Via Docker):**
    The project is configured to connect to a PostgreSQL database. You can easily spin up an instance using Docker Compose:
    ```bash
    docker-compose up -d
    ```
    This will start a container with PostgreSQL ready to be used.

3.  **Run the Application:**
    Use the Maven wrapper to compile and start the Spring Boot server:
    ```bash
    ./mvnw spring-boot:run
    ```

4.  **Access the API:**
    * The application will be running at `http://localhost:8080`
    * The Swagger documentation will be available at `http://localhost:8080/swagger-ui.html`

---

## üèõÔ∏è Project Structure
The project follows the MVC architectural pattern with a clear separation of concerns:

-   `src/main/java/com/kokusen/api/controller`: API entry layer (REST Endpoints).
-   `src/main/java/com/kokusen/api/service`: Business logic layer.
-   `src/main/java/com/kokusen/api/model`: JPA entities representing the data.
-   `src/main/java/com/kokusen/api/repository`: Interfaces for database access.
-   `src/main/java/com/kokusen/api/dto`: Data Transfer Objects for validation and communication.
-   `src/main/resources/db/migration`: Flyway migration scripts (SQL).

---

## ü§ù Contributing

Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.

1.  Fork the Project
2.  Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3.  Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4.  Push to the Branch (`git push origin feature/AmazingFeature`)
5.  Open a Pull Request



[PT-BR]
# Kokusen-API ‚ö°
Uma API REST imersiva e gamificada baseada no universo de Jujutsu Kaisen.

[![Java](https://img.shields.io/badge/Java-17-blue.svg)](https://www.java.com)
[![Spring Boot](https://img.shields.io/badge/Spring_Boot-3.3-green.svg)](https://spring.io/projects/spring-boot)
[![PostgreSQL](https://img.shields.io/badge/PostgreSQL-16-blue.svg)](https://www.postgresql.org/)
[![Docker](https://img.shields.io/badge/Docker-ready-blue.svg)](https://www.docker.com/)
[![Swagger](https://img.shields.io/badge/Swagger-documented-green.svg)](https://swagger.io/)

---

## üìñ Sobre o Projeto

**Kokusen-API** √© o backend de um ecossistema completo para f√£s de Jujutsu Kaisen. A API permite gerenciar entidades do universo como Feiticeiros, Cl√£s e T√©cnicas Amaldi√ßoadas. Al√©m disso, introduz elementos de gamifica√ß√£o, como um sistema de quiz para aumentar o n√≠vel de "Energia Amaldi√ßoada" dos usu√°rios e a capacidade de montar times estrat√©gicos de feiticeiros.

O projeto foi constru√≠do seguindo as melhores pr√°ticas de desenvolvimento, com uma arquitetura MVC (Model-View-Controller) bem definida, valida√ß√£o de dados e seguran√ßa de endpoints.

### ‚ú® Funcionalidades Planejadas
- [ ] CRUD completo de Feiticeiros e Cl√£s.
- [ ] Sistema de autentica√ß√£o e autoriza√ß√£o de usu√°rios com Spring Security.
- [ ] Endpoint de Quiz para testar conhecimentos e aumentar o n√≠vel de energia.
- [ ] L√≥gica para montar e gerenciar times de feiticeiros.
- [ ] Documenta√ß√£o interativa e completa com Swagger (OpenAPI).
- [ ] Aplica√ß√£o totalmente containerizada com Docker.

---

## üõ†Ô∏è Tecnologias Utilizadas

Este projeto foi constru√≠do com um conjunto de tecnologias modernas e robustas:

* **Linguagem:** Java 17+
* **Framework:** Spring Boot 3.3+
* **Acesso a Dados:** Spring Data JPA
* **Seguran√ßa:** Spring Security
* **Banco de Dados:** PostgreSQL
* **Valida√ß√£o:** Bean Validation
* **Otimiza√ß√£o de C√≥digo:** Lombok
* **Migrations do Banco:** Flyway
* **Documenta√ß√£o:** SpringDoc (Swagger/OpenAPI)
* **Containeriza√ß√£o:** Docker

---

## üöÄ Como Come√ßar

Para executar este projeto localmente, siga os passos abaixo.

### Pr√©-requisitos
* JDK 17 ou superior
* Maven 3.8+ ou Gradle 8+
* Docker e Docker Compose (recomendado para o banco de dados)

### Instala√ß√£o

1.  **Clone o reposit√≥rio:**
    ```bash
    git clone [https://github.com/seu-usuario/kokusen-api.git](https://github.com/seu-usuario/kokusen-api.git)
    cd kokusen-api
    ```

2.  **Configure o Banco de Dados (Via Docker):**
    O projeto est√° configurado para se conectar a um banco de dados PostgreSQL. Voc√™ pode subir uma inst√¢ncia facilmente com o Docker Compose:
    ```bash
    docker-compose up -d
    ```
    Isso iniciar√° um container com o PostgreSQL pronto para ser usado.

3.  **Execute a Aplica√ß√£o:**
    Use o wrapper do Maven para compilar e iniciar o servidor Spring Boot:
    ```bash
    ./mvnw spring-boot:run
    ```

4.  **Acesse a API:**
    * A aplica√ß√£o estar√° rodando em `http://localhost:8080`
    * A documenta√ß√£o do Swagger estar√° dispon√≠vel em `http://localhost:8080/swagger-ui.html`

---

## üèõÔ∏è Estrutura do Projeto
O projeto segue o padr√£o de arquitetura MVC, com uma clara separa√ß√£o de responsabilidades:

-   `src/main/java/com/kokusen/api/controller`: Camada de entrada da API (Endpoints REST).
-   `src/main/java/com/kokusen/api/service`: Camada de l√≥gica de neg√≥cio.
-   `src/main/java/com/kokusen/api/model`: Entidades JPA que representam os dados.
-   `src/main/java/com/kokusen/api/repository`: Interfaces para acesso ao banco de dados.
-   `src/main/java/com/kokusen/api/dto`: Objetos de Transfer√™ncia de Dados para valida√ß√£o e comunica√ß√£o.
-   `src/main/resources/db/migration`: Scripts de migration do Flyway (SQL).

---

## ü§ù Como Contribuir

Contribui√ß√µes s√£o o que tornam a comunidade de c√≥digo aberto um lugar incr√≠vel para aprender, inspirar e criar. Qualquer contribui√ß√£o que voc√™ fizer ser√° **muito apreciada**.

1.  Fa√ßa um "Fork" do projeto
2.  Crie sua "Feature Branch" (`git checkout -b feature/AmazingFeature`)
3.  Fa√ßa o "Commit" de suas altera√ß√µes (`git commit -m 'Add some AmazingFeature'`)
4.  Fa√ßa o "Push" para a Branch (`git push origin feature/AmazingFeature`)
5.  Abra um "Pull Request"

